var crel = require('crel');
var lookup = {
  paragraph: 'p',
  link: 'a',
  heading: function(node, attr, children) {
    return 'h' + node.level
  },

  code: function(node, attr, children) {
    children.push(node.code);

    return 'pre';
  }
};

var IGNORE_KEYS = ['type', 'text', 'code'];

/**
  # marked-ast-crel

  Using the AST generated by [marked-ast](https://github.com/pdubroy/marked-ast)
  create HTML elements using [crel](https://github.com/KoryNunn/crel). Saves
  doing any nasty `innerHTML` like things...

  ## Example Usage

  Simple example:

  ```
  npm run simple
  ```

  <<< examples/simple.js

  A little more complex (uses `brfs`):

  ```
  npm run complex
  ```

  <<< examples/complex.js

**/
var createNode = module.exports = function(node) {
  var attr = {};
  var keys;
  var tagName;
  var children;

  // if we have a string for the node, pass through
  if (typeof node == 'string' || (node instanceof String)) {
    return node;
  }

  // if we have string node text, then encapsulate as an array
  if (typeof node.text == 'string' || (node.text instanceof String)) {
    node.text = [ node.text ];
  }

  Object.keys(node).forEach(function(key) {
    if (IGNORE_KEYS.indexOf(key) >= 0) {
      return;
    }

    // if assigned, copy
    if (node[key]) {
      attr[key] = node[key];
    }
  })

  tagName = lookup[node.type] || node.type;
  children = node.text || [];

  // if the tagName is a function, then run it to get the actual tagName
  if (typeof tagName == 'function') {
    tagName = tagName(node, attr, children);
  }

  return crel.apply(null, [tagName, attr].concat(children.map(createNode)));
};
